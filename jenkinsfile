pipeline {
    agent none       
    environment { 
            NAME = "bwce_cicd.jenkins-build"
            IMAGE = "${BUILD_NUMBER}"
            DOCKERHUB_CREDENTIALS=credentials('c4e94794-26a5-4966-8d7b-73bdebe8febd')
        }

    stages {
        stage('Checkout - Git') 
        {
            agent {label 'linux'}        
            steps {

                   echo '########################### Cloning code from  GitHub... ###########################'
                    // Get some code from a GitHub repository
                    git branch: 'main', url: 'https://github.com/mpandav/cicd-demo.git'

                }
        }
             
        stage('Test & Build - Application')
        {
            agent {label 'linux'}        
           steps
           {
           // Run Maven on a Unix agent.
            echo '########################### Perform Unit Tests... ###########################'
    
            dir('cicd-demo.parent') 
            {
                // some block
                sh "mvn clean test"
            }
            echo '###########################Building Application EAR.. ###########################'
            sh "mvn -f cicd-demo.parent/pom.xml package"
            }
        }
              
               
        stage('Publish App Artifacts')
        {
            agent {label 'linux'}        
            steps
            {
                echo '########################### Move deployables to Artifacotory Server.. ###########################'  
                dir('cicd-demo.parent') 
                {
                    // some block 
                    sh "mvn deploy "
                }
                echo '########################### Artifacts are published to artifactory server... ###########################' 
            }
        }
               
        stage('Build & Push - App Image')
        {
            agent {label 'linux'}        
            steps
            {
                echo '########################### Start Creating Application Image -- ${NAME}:${IMAGE} ###############################'
                
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'    //docker hub login       
                
                // sh "docker build -t ${NAME}:${IMAGE} ."
                
                sh 'docker buildx build --platform linux/arm64,linux/amd64 -t mpandav/${NAME}:${IMAGE} --push .'
                
                echo '########################### App Image -- ${NAME}:${IMAGE} -- build Successfully ###############################'

                echo '########################### Push an App Image (${NAME}:${IMAGE}) to Registry (DockerHub)... #######################'
                            
                //    sh 'docker tag ${NAME}:${IMAGE} 10.211.55.4:5000/${NAME}:${IMAGE}'  
                            
                // sh 'docker tag ${NAME}:${IMAGE} mpandav/${NAME}:${IMAGE}'
                // sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'    //push to docker hub registry       
                // sh 'docker push mpandav/${NAME}:${IMAGE}'
                              
                // sh 'docker image rm -f ${NAME}:${IMAGE}'   //clean up of dangling images
                              
                //sh "docker push 10.211.55.4:5000/${NAME}:${IMAGE}". Local Docker Registry
                
                echo '########################### App Image -- ${NAME}:${IMAGE} -- published to Registry successfully... #######################'

            }
            post {
                success {
                //junit '**/target/surefire-reports/TEST-*.xml'#
                dir('cicd-demo'){
                     // some block
                     archiveArtifacts 'target/*.*'
                }
                echo '######################### Archieve all artifacts... ##########################'   
                }
            }
        }
                
                
        stage('Deploy App -K8S')
        {
            agent { label 'mac' }

            steps
            {
                echo '####################### Deploy App to K8S Cluster... #########################'  
                sh 'kubectl version'

                //sh 'kubectl apply -f manifest.yaml'
             }
        }

    }
}